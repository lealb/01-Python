# 打开数据库连接
db = pymysql.connect("127.0.0.1", "leal", "lidan", "test")
# 使用 cursor() 方法创建一个游标对象 cursor
cursor = db.cursor()
# 使用 execute()  方法执行 SQL 查询
cursor.execute("SELECT VERSION()")
# 使用 fetchone() 方法获取单条数据.
data = cursor.fetchone()
print("Database version : %s " % data)
# 使用 execute() 方法执行 SQL，如果表存在则删除
cursor.execute("DROP TABLE IF EXISTS py_employee")

# 使用预处理语句创建表
csql = """CREATE TABLE py_employee (
         id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
         first_name  CHAR(20) NOT NULL,
         last_name  CHAR(20),
         age INT,
         sxt CHAR(1),
         income FLOAT )"""
# SQL 插入语句
isql = """INSERT INTO py_employee
         VALUES (NULL,'Mac', 'Mohan', 20, 'M', 2000)"""

# SQL 查询语句
qsql = "SELECT * FROM py_employee \
       WHERE income > '%d'" % (1000)

# 执行建表语句
cursor.execute(csql)
try:
    # 执行sql语句
    cursor.execute(isql)
    # 提交到数据库执行
    db.commit()
    print("insert success")
    # 执行查询SQL语句
    cursor.execute(qsql)
    # 获取所有记录列表
    results = cursor.fetchall()
    for row in results:
        fname = row[0]
        lname = row[1]
        age = row[2]
        sex = row[3]
        income = row[4]
        # 打印结果
        print ("fname=%s,lname=%s,age=%d,sex=%s,income=%d" % \
               (fname, lname, age, sex, income ))
except:
    # 如果发生错误则回滚
    db.rollback()

    # 事务机制可以确保数据一致性。
    # 事务应该具有4个属性：原子性、一致性、隔离性、持久性。这四个属性通常称为ACID特性。
    # 原子性（atomicity）。一个事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做。
    # 一致性（consistency）。事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。
    # 隔离性（isolation）。一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，
    # 并发执行的各个事务之间不能互相干扰。
    # 持久性（durability）。持续性也称永久性（permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。
    # 接下来的其他操作或故障不应该对其有任何影响。
# 关闭数据库连接
db.close()